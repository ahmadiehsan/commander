# =========================
# Package
# =====
[build-system]
requires = ["setuptools"]
build-backend = "setuptools.build_meta"

[project]
name = "commander"
version = "5.0.0"
authors = [{ name = "Ehsan Ahmadi", email = "1374ea@gmail.com" }]
description = "A framework for creating commands"
readme = "README.md"
requires-python = ">=3.8,<4.0.0"
dependencies = []

[project.urls]
Repository = "https://github.com/ahmadiehsan/commander"

[project.scripts]
commander-admin = "commander.scripts:commander_admin"

[tool.setuptools.packages.find]
include = ["commander*"]

# =========================
# Poetry
# =====
[tool.poetry]
name = "commander"
version = "5.0.0"
authors = ["Ehsan Ahmadi <1374ea@gmail.com>"]
description = "A framework for creating commands"

[tool.poetry.dependencies]
python = "^3.8"

[tool.poetry.dev-dependencies]
pre-commit = "3.5.0"

# =========================
# Ruff
# =====
[tool.ruff]
target-version = "py38"
line-length = 120

[tool.ruff.lint]
select = ["ALL"]
ignore = [
    "D104",  # undocumented-public-package
    "D100",  # undocumented-public-module
    "D101",  # undocumented-public-class
    "D106",  # undocumented-public-nested-class
    "D107",  # undocumented-public-init
    "D102",  # undocumented-public-method
    "D105",  # undocumented-magic-method
    "D103",  # undocumented-public-function
    "ANN001",  # missing-type-function-argument
    "ANN002",  # missing-type-args
    "ANN003",  # missing-type-kwargs
    "ANN201",  # missing-return-type-undocumented-public-function
    "ANN202",  # missing-return-type-private-function
    "ANN204",  # missing-return-type-special-method
    "ANN205",  # missing-return-type-static-method
    "ANN206",  # missing-return-type-class-method
    "G004",  # logging-f-string
    "D203",  # one-blank-line-before-class (conflict with D211)
    "D213",  # multi-line-summary-second-line (conflict with D212)
    "COM812",  # missing-trailing-comma (Suggested by ruff to disable)
    "ISC001",  # single-line-implicit-string-concatenation (Suggested by ruff to disable)
]

[tool.ruff.lint.isort]
split-on-trailing-comma = false
combine-as-imports = true

[tool.ruff.format]
skip-magic-trailing-comma = true

# =========================
# Pylint
# =====
[tool.pylint.main]
py-version = "3.8"

[tool.pylint.format]
max-line-length = 120

[tool.pylint."messages control"]
disable = [
    "missing-module-docstring",
    "missing-class-docstring",
    "missing-function-docstring",
    "import-error",
    "duplicate-code",
    "logging-fstring-interpolation",
    "fixme",  # Ruff will handle it
    "broad-exception-raised",  # Ruff will handle it
    "line-too-long",  # Ruff will handle it
    "unused-argument",  # Ruff will handle it
    "too-many-arguments",  # Ruff will handle it
    "too-many-branches",  # Ruff will handle it
    "too-many-statements",  # Ruff will handle it
    "bare-except",  # Ruff will handle it
]

[tool.pylint.design]
min-public-methods = 1

# =========================
# Bandit
# =====
[tool.bandit]
skips = [
    "B404",  # import_subprocess
    "B603",  # subprocess_without_shell_equals_true
    "B112",  # try_except_continue (Ruff will handle it)
]
